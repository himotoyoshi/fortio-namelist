#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'


require "strscan"
require "stringio"

module FortIO
end

module FortIO::Namelist

  class Scanner 
  
    def initialize (text)
      @s = StringScanner.new(text)
      @in_namelist = nil
    end

    attr_accessor :in_namelist

    def debug_info
      lines  = @s.string.split(/\n/)
      lineno = @s.string[0...@s.pos].split(/\n/).size
      info = ""
      if lineno > 1
        info << format("   %4i: %s\n", lineno-1, lines[lineno-2])
      end
      info << format(">> %4i: %s\n", lineno, lines[lineno-1])
      if lineno <= lines.size - 1
        info << format("   %4i: %s\n", lineno+1, lines[lineno])
      end
      info
    end

    def yylex
      while @s.rest?
        unless @in_namelist
          case
          when @s.scan(/\A([\$&])/)              ### {$|&}
            @in_namelist = "dummy"
            return [
              @s[0], 
              nil
            ]
          when @s.scan(/\A[^\$&]/)
            next
          end       
        else
          case
          when @s.scan(/\A[+-]?(\d+)\.(\d+)?([ED][+-]?(\d+))?/i) ### float
            return [                              ### 1.2E+3, 1.E+3, 1.2E3
              :FLOAT,                             ### 1.2, 1.
              @s[0].sub(/D/i,'e').sub(/\.e/,".0e").to_f
            ]
          when @s.scan(/\A[+-]?\.(\d+)([ED][+-]?(\d+))?/i)       ### float
            return [                              ### .2E+3, -.2E+3, .2E3
              :FLOAT,                             ### .2, -.2
              @s[0].sub(/D/i,'e').sub(/\./, '0.').to_f
            ]
          when @s.scan(/\A[+-]?(\d+)[ED][+-]?(\d+)/i)            ### float
            return [                              ### 12E+3, 12E3, 0E0
              :FLOAT, 
              @s[0].sub(/D/i,'e').to_f
            ]
          when @s.scan(/\A\d+[a-z_]\w*/i)         ### STRING
            return [
              :STRING,
              @s[0]
            ]
          when @s.scan(/\A[\-\+]?\d+/)            ### digits
            return [
              :DIGITS, 
              Integer(@s[0])
            ]
          when @s.scan(/\A'((?:''|[^'])*)'/)      ### 'quoted string'
            return [
              :STRING, 
              @s[1].gsub(/''/, "'")
            ]
          when @s.scan(/\A"((?:""|[^"])*)"/)      ### 'double-quoted string'
            return [
              :STRING, 
              @s[1].gsub(/""/, '"')
            ]
          when @s.scan(/\A,/)                     ### ,
            @s.scan(/\A[ \t]+/)
            while @s.scan(/\A\n[ \t]*/) or @s.scan(/\A\![^\n]*/)
              ### skip comment
            end
            if @s.scan(/\A\&[ \t]*\n[ \t]*\&/)  ### & &
              return [
                ',',
                nil
              ]
            elsif @s.match?(/\A[a-z]\w*/i) or @s.match?(/\A[\&\$\/\!]/)
              return [
                :COMMA, 
                nil
              ]
            elsif @s.match?(/\A,/)
              return [
                :NIL,
                nil
              ]
            else
              return [
                ',',
                nil
              ]
            end
          when @s.scan(/\A\&[ \t]*\n[ \t]*\&/)      ### & &
            next            
          when @s.scan(/\A[\$&\/=\(\):*]/)        ### {$|&|/|,|=|(|)|:|*}
            return [
              @s[0], 
              nil
            ]
          when @s.scan(/\A_\w*/i)                 ### STRING
            return [
              :STRING,
              @s[0]
            ]
          when @s.scan(/\A\.t.*?\./i)             ### LOGICAL true
            return [                 
              :LOGICAL,
              true,
            ]
          when @s.scan(/\A\.f.*?\./i)             ### LOGICAL false
            return [
              :LOGICAL,
              false,
            ]
          when @s.match?(/\At[^\w]/i)             ### LOGICAL true
            @s.scan(/\At/i)
            ms = @s[0]
            if @s.match?(/\A[ \t]*=/)
              return [
                :IDENT,
                ms
              ]
            else
              return [                 
                :LOGICAL,
                true,
              ]
            end
          when @s.match?(/\Af[^\w]/i)             ### LOGICAL false
            @s.scan(/\Af/i)
            ms = @s[0]
            if @s.match?(/\A[ \t]*=/)
              return [
                :IDENT,
                ms
              ]
            else
              return [                 
                :LOGICAL,
                false,
              ]
            end
          when @s.scan(/\A[a-z]\w*/i)             ### IDENT or LOGICAL
            return [
              :IDENT,
              @s[0]
            ]
          when @s.scan(/\A\n/)                    ### newline
            return [
              :NL,
              nil
            ]
            next
          when @s.scan(/\A[ \t]+/)                ### blank
            next
          when @s.scan(/\A![^\n]*?\n/)            ### comment
            next
          else
            @s.rest =~ /\A(.*)$/
            raise "namelist parse error ('#{$1}')\n" + debug_info
          end
        end
      end
    end

  end
end

module FortIO
  module Namelist
    class Parser < Racc::Parser

module_eval(<<'...end fortran_namelist.y/module_eval...', 'fortran_namelist.y', 115)

  def parse (str)
    @scan = FortIO::Namelist::Scanner.new(str)
    @root = {}
    begin
      @yydebug = true
      do_parse
    rescue Racc::ParseError => err
      message = ""
      message << "namelist " << err.message[1..-1] 
      if @scan.in_namelist and @scan.in_namelist != "dummy"
        message << " in &#{@scan.in_namelist} ... &end"
      end
      message << "\n"
      message << @scan.debug_info
      raise RuntimeError, message
    end
    return @root
  end

  def next_token
    return @scan.yylex
  end

...end fortran_namelist.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    54,    24,    49,    49,    30,    40,    50,    50,    48,    31,
    25,    42,    38,    44,    33,    53,    34,    35,    36,    40,
    46,    38,    23,    33,    30,    34,    35,    36,    59,    31,
    60,    42,    38,    61,    33,    40,    34,    35,    36,    30,
    19,    20,     4,     5,    31,    17,    27,    38,    44,    33,
    45,    34,    35,    36,    16,    46,    38,    65,    33,    30,
    34,    35,    36,    66,    31,     7,    42,    38,    44,    33,
    52,    34,    35,    36,   nil,    46,    38,   nil,    33,    30,
    34,    35,    36,   nil,    31,   nil,    42,    38,   nil,    33,
   nil,    34,    35,    36,    46,    38,   nil,    33,   nil,    34,
    35,    36,    38,   nil,    33,   nil,    34,    35,    36,    38,
   nil,    33,   nil,    34,    35,    36,    38,   nil,    58,   nil,
    34,    35,    36,    19,    20,     4,     5,    15,    12,    11,
     4,     5,    15,    12,     4,     5 ]

racc_action_check = [
    40,    15,    59,    38,    42,    65,    59,    38,    33,    42,
    15,    42,    42,    64,    42,    40,    42,    42,    42,    25,
    64,    64,    13,    64,    60,    64,    64,    64,    51,    60,
    52,    60,    60,    53,    60,    54,    60,    60,    60,    24,
    24,    24,     0,     0,    24,     7,    24,    24,    41,    24,
    41,    24,    24,    24,     6,    41,    41,    61,    41,    27,
    41,    41,    41,    63,    27,     1,    27,    27,    28,    27,
    39,    27,    27,    27,   nil,    28,    28,   nil,    28,    30,
    28,    28,    28,   nil,    30,   nil,    30,    30,   nil,    30,
   nil,    30,    30,    30,    47,    47,   nil,    47,   nil,    47,
    47,    47,    45,   nil,    45,   nil,    45,    45,    45,    44,
   nil,    44,   nil,    44,    44,    44,    48,   nil,    48,   nil,
    48,    48,    48,    10,    10,    10,    10,    10,    10,     3,
     3,     3,     3,     3,     2,     2 ]

racc_action_pointer = [
    36,    65,   128,   124,   nil,   nil,    46,    45,   nil,   nil,
   119,   nil,   nil,    14,   nil,    -1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36,     6,   nil,    56,    65,   nil,
    76,   nil,   nil,    -6,   nil,   nil,   nil,   nil,   -10,    58,
    -3,    45,     1,   nil,    98,    91,   nil,    84,   105,   nil,
   nil,    25,    28,    20,    22,   nil,   nil,   nil,   nil,   -11,
    21,    54,   nil,    51,    10,    -8,   nil,   nil ]

racc_action_default = [
    -1,   -44,    -1,   -44,    -6,    -7,   -44,   -44,    -3,    -4,
   -44,    -9,   -10,   -44,   -14,   -44,    -8,    68,    -5,   -12,
   -13,   -15,   -16,   -11,   -44,   -44,   -17,   -18,   -19,   -21,
   -44,   -29,   -30,   -34,   -32,   -33,   -35,   -36,   -44,   -44,
   -40,   -26,   -44,   -22,   -44,   -28,   -25,   -27,   -44,   -37,
   -38,   -44,   -44,   -44,   -44,   -23,   -24,   -31,   -34,   -44,
   -44,   -41,   -42,   -44,   -20,   -44,   -39,   -43 ]

racc_goto_table = [
    39,    43,    28,    51,    14,    22,     9,    57,    47,    13,
     1,    21,     8,    18,    43,    10,    13,    55,    56,    26,
    43,   nil,   nil,   nil,    63,   nil,   nil,   nil,   nil,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    64,   nil,
    67 ]

racc_goto_check = [
    10,    11,     9,    14,     8,     7,     4,    12,     9,     6,
     1,     8,     1,     4,    11,     5,     6,    11,    11,     7,
    11,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,     9,   nil,
    10 ]

racc_goto_pointer = [
   nil,    10,   nil,   nil,     3,    12,     6,    -5,     1,   -22,
   -25,   -27,   -41,   nil,   -35 ]

racc_goto_default = [
   nil,   nil,     2,     3,   nil,   nil,     6,   nil,   nil,    41,
   nil,    29,    32,    37,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 20, :_reduce_none,
  1, 20, :_reduce_none,
  2, 20, :_reduce_none,
  2, 21, :_reduce_4,
  3, 21, :_reduce_5,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  2, 22, :_reduce_8,
  2, 22, :_reduce_none,
  1, 23, :_reduce_none,
  2, 23, :_reduce_11,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 24, :_reduce_14,
  2, 24, :_reduce_15,
  2, 24, :_reduce_16,
  3, 27, :_reduce_17,
  3, 27, :_reduce_18,
  3, 27, :_reduce_19,
  6, 27, :_reduce_20,
  1, 28, :_reduce_21,
  2, 28, :_reduce_22,
  3, 28, :_reduce_23,
  3, 28, :_reduce_24,
  2, 28, :_reduce_25,
  2, 28, :_reduce_26,
  2, 28, :_reduce_27,
  2, 28, :_reduce_28,
  1, 28, :_reduce_29,
  1, 30, :_reduce_30,
  3, 30, :_reduce_31,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  5, 32, :_reduce_39,
  1, 29, :_reduce_40,
  3, 29, :_reduce_41,
  3, 29, :_reduce_42,
  5, 29, :_reduce_43 ]

racc_reduce_n = 44

racc_shift_n = 68

racc_token_table = {
  false => 0,
  :error => 1,
  "=" => 2,
  "," => 3,
  :COMMA => 4,
  :NL => 5,
  "&" => 6,
  "$" => 7,
  :IDENT => 8,
  "/" => 9,
  :NIL => 10,
  "(" => 11,
  ")" => 12,
  :DIGITS => 13,
  "*" => 14,
  :STRING => 15,
  :LOGICAL => 16,
  :FLOAT => 17,
  ":" => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"=\"",
  "\",\"",
  "COMMA",
  "NL",
  "\"&\"",
  "\"$\"",
  "IDENT",
  "\"/\"",
  "NIL",
  "\"(\"",
  "\")\"",
  "DIGITS",
  "\"*\"",
  "STRING",
  "LOGICAL",
  "FLOAT",
  "\":\"",
  "$start",
  "namelist_all",
  "namelist",
  "header",
  "tailer",
  "paramlist",
  "prefix",
  "separator",
  "paramdef",
  "rvalues",
  "array_spec",
  "abbreb",
  "constant",
  "complex",
  "real" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 31)
  def _reduce_4(val, _values, result)
     @root[val[0]] = []; @scan.in_namelist = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 33)
  def _reduce_5(val, _values, result)
     @root[val[0]] = val[1]; @scan.in_namelist = nil
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 39)
  def _reduce_8(val, _values, result)
     result = val[1].downcase; @scan.in_namelist = val[1].downcase
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 44)
  def _reduce_11(val, _values, result)
     raise Racc::ParseError, "\nparse error (&)" unless val[1] =~ /\Aend\Z/i
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 50)
  def _reduce_14(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 52)
  def _reduce_15(val, _values, result)
     result = val[0] + [val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 54)
  def _reduce_16(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 58)
  def _reduce_17(val, _values, result)
     result = ParamDef.new(val[0].downcase, nil, "")
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 60)
  def _reduce_18(val, _values, result)
     result = ParamDef.new(val[0].downcase, nil, "")
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 62)
  def _reduce_19(val, _values, result)
     result = ParamDef.new(val[0].downcase, nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 64)
  def _reduce_20(val, _values, result)
     result = ParamDef.new(val[0].downcase, val[2], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 67)
  def _reduce_21(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 69)
  def _reduce_22(val, _values, result)
     result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 71)
  def _reduce_23(val, _values, result)
     result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 73)
  def _reduce_24(val, _values, result)
     result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 75)
  def _reduce_25(val, _values, result)
     result = val[0] + [nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 77)
  def _reduce_26(val, _values, result)
     result = [nil] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 79)
  def _reduce_27(val, _values, result)
     result = [nil] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 81)
  def _reduce_28(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 83)
  def _reduce_29(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 86)
  def _reduce_30(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 88)
  def _reduce_31(val, _values, result)
     result = [val[2]] * val[0]
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 100)
  def _reduce_39(val, _values, result)
     result = Complex(val[1],val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 103)
  def _reduce_40(val, _values, result)
     result = [val[0]-1]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 105)
  def _reduce_41(val, _values, result)
     result = [(val[0]-1)..(val[2]-1)]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 107)
  def _reduce_42(val, _values, result)
     result = [val[0]-1] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 109)
  def _reduce_43(val, _values, result)
     result = [(val[0]-1)..(val[2]-1)] + val[4]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module Namelist
end   # module FortIO



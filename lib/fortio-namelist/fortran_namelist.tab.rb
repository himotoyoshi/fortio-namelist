#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


require "strscan"
require "stringio"

module FortIO
end

module FortIO::Namelist

  class Scanner 
  
    def initialize (text)
      @s = StringScanner.new(text)
      @in_namelist = nil
    end

    attr_accessor :in_namelist

    def debug_info
      lines  = @s.string.split(/\n/)
      lineno = @s.string[0...@s.pos].split(/\n/).size
      info = ""
      if lineno > 1
        info << format("   %4i: %s\n", lineno-1, lines[lineno-2])
      end
      info << format(">> %4i: %s\n", lineno, lines[lineno-1])
      if lineno <= lines.size - 1
        info << format("   %4i: %s\n", lineno+1, lines[lineno])
      end
      info
    end

    def yylex
      while @s.rest?
        unless @in_namelist
          case
          when @s.scan(/\A([\$&])/)              ### {$|&}
            @in_namelist = "dummy"
            return [
              @s[0], 
              nil
            ]
          when @s.scan(/\A[^\$&]/)
            next
          end       
        else
          case
          when @s.scan(/\A\(/)
            return [
              '(',
              nil
            ]
          when @s.scan(/\A\)/)
            return [
              ')',
              nil
            ]
          when @s.scan(/\A\:/)
            return [
              ':',
              nil
            ]
          when @s.scan(/\A[+-]?(\d+)\.(\d+)?([ED][+-]?(\d+))?/i) ### float
            return [                              ### 1.2E+3, 1.E+3, 1.2E3
              :FLOAT,                             ### 1.2, 1.
              @s[0].sub(/D/i,'e').sub(/\.e/,".0e").to_f
            ]
          when @s.scan(/\A[+-]?\.(\d+)([ED][+-]?(\d+))?/i)       ### float
            return [                              ### .2E+3, -.2E+3, .2E3
              :FLOAT,                             ### .2, -.2
              @s[0].sub(/D/i,'e').sub(/\./, '0.').to_f
            ]
          when @s.scan(/\A[+-]?(\d+)[ED][+-]?(\d+)/i)            ### float
            return [                              ### 12E+3, 12E3, 0E0
              :FLOAT, 
              @s[0].sub(/D/i,'e').to_f
            ]
          when @s.scan(/\A\d+[a-z_]\w*/i)         ### STRING-Like
            return [
              :STRINGLIKE,
              @s[0]
            ]
          when @s.scan(/\A[\-\+]?\d+/)            ### digits
            return [
              :DIGITS, 
              Integer(@s[0])
            ]
          when @s.scan(/\A'((?:''|[^'])*)'/)      ### 'quoted string'
            return [
              :STRING, 
              @s[1].gsub(/''/, "'")
            ]
          when @s.scan(/\A"((?:""|[^"])*)"/)      ### 'double-quoted string'
            return [
              :STRING, 
              @s[1].gsub(/""/, '"')
            ]
          when @s.scan(/\A,/)                     ### ,
            @s.scan(/\A[ \t]+/)
            while @s.scan(/\A\n[ \t]*/) or @s.scan(/\A\![^\n]*/)
              ### skip comment
            end
            if @s.scan(/\A\&[ \t]*\n[ \t]*\&/)  ### & &
              return [
                ',',
                nil
              ]
            elsif @s.match?(/\A[a-z]\w*\s*,/i) 
              return [
                ',', 
                nil
              ]
            elsif @s.match?(/\A[a-z]\w*/i) or @s.match?(/\A[\&\$\/\!]/)
              return [
                :COMMA, 
                nil
              ]
            elsif @s.match?(/\A,/)
              return [
                :NIL,
                nil
              ]
            else
              return [
                ',',
                nil
              ]
            end
          when @s.scan(/\A\&[ \t]*\n[ \t]*\&/)      ### & &
            next            
          when @s.scan(/\A[\$&\/=\(\):*]/)        ### {$|&|/|,|=|(|)|:|*}
            return [
              @s[0], 
              nil
            ]
          when @s.scan(/\A_\w*/i)                 ### STRING-Like
            return [
              :STRINGLIKE,
              @s[0]
            ]
          when @s.scan(/\A\.t.*?\./i)             ### LOGICAL true
            return [                 
              :LOGICAL,
              true,
            ]
          when @s.scan(/\A\.f.*?\./i)             ### LOGICAL false
            return [
              :LOGICAL,
              false,
            ]
          when @s.match?(/\At[^\w]/i)             ### LOGICAL true
            @s.scan(/\At/i)
            ms = @s[0]
            if @s.match?(/\A[ \t]*=/)
              return [
                :IDENT,
                ms
              ]
            else
              return [                 
                :LOGICAL,
                true,
              ]
            end
          when @s.match?(/\Af[^\w]/i)             ### LOGICAL false
            @s.scan(/\Af/i)
            ms = @s[0]
            if @s.match?(/\A[ \t]*=/)
              return [
                :IDENT,
                ms
              ]
            else
              return [                 
                :LOGICAL,
                false,
              ]
            end
          when @s.scan(/\A[a-z]\w*/i)             ### IDENT or LOGICAL
            return [
              :IDENT,
              @s[0]
            ]
          when @s.scan(/\A\n/)                    ### newline
            return [
              :NL,
              nil
            ]
            next
          when @s.scan(/\A[ \t]+/)                ### blank
            next
          when @s.scan(/\A![^\n]*?\n/)            ### comment
            next
          else
            @s.rest =~ /\A(.*)$/
            raise "namelist parse error ('#{$1}')\n" + debug_info
          end
        end
      end
    end

  end
end

module FortIO
  module Namelist
    class Parser < Racc::Parser

module_eval(<<'...end fortran_namelist.y/module_eval...', 'fortran_namelist.y', 122)

  def parse (str)
    @scan = FortIO::Namelist::Scanner.new(str)
    @root = {}
    begin
      @yydebug = true
      do_parse
    rescue Racc::ParseError => err
      message = ""
      message << "namelist " << err.message[1..-1] 
      if @scan.in_namelist and @scan.in_namelist != "dummy"
        message << " in &#{@scan.in_namelist} ... &end"
      end
      message << "\n"
      message << @scan.debug_info
      raise RuntimeError, message
    end
    return @root
  end

  def next_token
    return @scan.yylex
  end

...end fortran_namelist.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,    30,    13,    58,    60,    43,    14,    35,    15,    37,
    57,    38,    39,    42,    45,    44,    22,    22,    61,    54,
    43,    24,    35,    42,    37,    44,    38,    39,    42,    45,
    43,    54,    35,    47,    37,    42,    38,    39,    42,    45,
    43,    52,    51,    50,    37,    43,    38,    39,    42,    37,
    43,    38,    39,    42,    54,    53,    38,    39,    42,     4,
     5,    21,     4,     5,    18,     4,     5,    21,    56,     7,
    18,     4,     5,    10,    13,    10,    13,    25,    26,    63,
    64,    65,    47,    69,    70,    47 ]

racc_action_check = [
    25,    25,    25,    47,    52,    25,     6,    25,     7,    25,
    47,    25,    25,    25,    25,    29,    11,    29,    52,    43,
    29,    19,    29,    43,    29,    64,    29,    29,    29,    29,
    64,    63,    64,    26,    64,    63,    64,    64,    64,    64,
    32,    33,    32,    32,    32,    50,    32,    32,    32,    50,
    53,    50,    50,    50,    53,    37,    53,    53,    53,     9,
     9,     9,     0,     0,     9,    23,    23,    23,    46,     1,
    23,     1,     1,     3,     3,    16,    16,    21,    21,    55,
    56,    57,    58,    65,    67,    69 ]

racc_action_pointer = [
    60,    69,   nil,    68,   nil,   nil,     2,     8,   nil,    57,
   nil,    10,   nil,   nil,   nil,   nil,    70,   nil,   nil,    17,
   nil,    69,   nil,    63,   nil,    -4,    20,   nil,   nil,    11,
   nil,   nil,    31,    29,   nil,   nil,   nil,    41,   nil,   nil,
   nil,   nil,   nil,     6,   nil,   nil,    58,    -9,   nil,   nil,
    36,   nil,     0,    41,   nil,    67,    72,    68,    69,   nil,
   nil,   nil,   nil,    18,    21,    71,   nil,    74,   nil,    72,
   nil,   nil ]

racc_action_default = [
   -46,   -46,    -2,   -13,    -5,    -6,   -46,   -46,    -1,   -46,
    -8,    -9,   -10,   -11,    -7,    72,   -13,    -4,   -14,   -46,
   -16,   -46,   -12,   -46,   -15,   -46,   -46,    -3,   -17,   -46,
   -18,   -19,   -22,   -23,   -24,   -25,   -29,   -35,   -31,   -32,
   -33,   -34,   -36,   -46,   -38,   -39,   -46,   -42,   -20,   -26,
   -46,   -28,   -46,   -46,   -35,   -46,   -46,   -46,   -46,   -27,
   -40,   -41,   -30,   -46,   -46,   -43,   -44,   -46,   -21,   -46,
   -37,   -45 ]

racc_goto_table = [
    46,    31,    55,    49,    17,    48,    19,     2,     8,    20,
     1,     9,    16,    29,    62,   nil,   nil,   nil,    27,   nil,
    19,    59,    67,    28,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    68,   nil,   nil,    71 ]

racc_goto_check = [
    12,    11,    17,    15,     6,    11,     7,     2,     2,    10,
     1,     4,     5,     8,    16,   nil,   nil,   nil,     6,   nil,
     7,    15,    17,    10,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    11,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    10,     7,   nil,     8,     3,    -5,    -3,   -12,   nil,
     0,   -24,   -26,   nil,   nil,   -29,   -39,   -41,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,   nil,   nil,     6,    11,    12,
   nil,   nil,   nil,    32,    33,    34,    36,    40,    41 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 21, :_reduce_none,
  1, 21, :_reduce_none,
  5, 22, :_reduce_3,
  3, 22, :_reduce_4,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  2, 23, :_reduce_7,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 28, :_reduce_none,
  2, 28, :_reduce_none,
  0, 29, :_reduce_none,
  1, 26, :_reduce_none,
  2, 26, :_reduce_15,
  1, 25, :_reduce_16,
  3, 25, :_reduce_17,
  3, 30, :_reduce_18,
  3, 30, :_reduce_19,
  4, 30, :_reduce_20,
  6, 30, :_reduce_21,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_25,
  2, 33, :_reduce_26,
  3, 33, :_reduce_27,
  2, 33, :_reduce_28,
  1, 35, :_reduce_29,
  3, 35, :_reduce_30,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  5, 38, :_reduce_37,
  1, 34, :_reduce_38,
  1, 34, :_reduce_39,
  3, 34, :_reduce_40,
  3, 34, :_reduce_41,
  1, 32, :_reduce_42,
  3, 32, :_reduce_43,
  3, 32, :_reduce_44,
  5, 32, :_reduce_45 ]

racc_reduce_n = 46

racc_shift_n = 72

racc_token_table = {
  false => 0,
  :error => 1,
  "&" => 2,
  "$" => 3,
  :IDENT => 4,
  :COMMA => 5,
  :NL => 6,
  "/" => 7,
  "=" => 8,
  "(" => 9,
  ")" => 10,
  :NIL => 11,
  "," => 12,
  :DIGITS => 13,
  "*" => 14,
  :STRING => 15,
  :LOGICAL => 16,
  :FLOAT => 17,
  :STRINGLIKE => 18,
  ":" => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"&\"",
  "\"$\"",
  "IDENT",
  "COMMA",
  "NL",
  "\"/\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "NIL",
  "\",\"",
  "DIGITS",
  "\"*\"",
  "STRING",
  "LOGICAL",
  "FLOAT",
  "STRINGLIKE",
  "\":\"",
  "$start",
  "namelist",
  "group",
  "group_header",
  "separator",
  "varlist",
  "group_end",
  "group_prefix",
  "nls",
  "blank",
  "vardef",
  "rvalues",
  "array_spec",
  "rlist",
  "ident_list",
  "element",
  "constant",
  "real",
  "complex" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 24)
  def _reduce_3(val, _values, result)
     @root[val[0]] = val[2]; @scan.in_namelist = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 26)
  def _reduce_4(val, _values, result)
     @root[val[0]] = []; @scan.in_namelist = nil
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 34)
  def _reduce_7(val, _values, result)
     result = val[1].downcase; @scan.in_namelist = val[1].downcase
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 50)
  def _reduce_15(val, _values, result)
     raise Racc::ParseError, "\nparse error (&)" unless val[1] =~ /\Aend\Z/i
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 53)
  def _reduce_16(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 55)
  def _reduce_17(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 59)
  def _reduce_18(val, _values, result)
     result = ParamDef.new(val[0].downcase, nil, "")
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 61)
  def _reduce_19(val, _values, result)
     result = ParamDef.new(val[0].downcase, nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 63)
  def _reduce_20(val, _values, result)
     result = ParamDef.new(val[0].downcase, nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 65)
  def _reduce_21(val, _values, result)
     result = ParamDef.new(val[0].downcase, val[2], val[5])
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 73)
  def _reduce_25(val, _values, result)
     result = [nil, nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 75)
  def _reduce_26(val, _values, result)
     result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 77)
  def _reduce_27(val, _values, result)
     result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 79)
  def _reduce_28(val, _values, result)
     result = val[0] + [nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 82)
  def _reduce_29(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 84)
  def _reduce_30(val, _values, result)
     result = [val[2]] * val[0]
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'fortran_namelist.y', 98)
  def _reduce_37(val, _values, result)
     result = Complex(val[1],val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 101)
  def _reduce_38(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 103)
  def _reduce_39(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 105)
  def _reduce_40(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 107)
  def _reduce_41(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 110)
  def _reduce_42(val, _values, result)
     result = [val[0]-1]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 112)
  def _reduce_43(val, _values, result)
     result = [(val[0]-1)..(val[2]-1)]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 114)
  def _reduce_44(val, _values, result)
     result = [val[0]-1] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_namelist.y', 116)
  def _reduce_45(val, _values, result)
     result = [(val[0]-1)..(val[2]-1)] + val[4]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module Namelist
end   # module FortIO


